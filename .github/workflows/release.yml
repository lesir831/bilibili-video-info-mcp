name: 自动创建Release并发布

on:
  workflow_dispatch:
    inputs:
      version:
        description: '新版本号 (例如: 0.1.2)'
        required: true
      prerelease:
        description: '是否为预发布版本'
        type: boolean
        default: false

jobs:
  update-version:
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以便生成完整的commit log
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: 设置Git用户
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
      
      - name: 更新版本号
        run: |
          # 使用sed更新pyproject.toml中的版本号
          sed -i "s/version = \"[0-9]*\.[0-9]*\.[0-9]*\"/version = \"${{ github.event.inputs.version }}\"/g" pyproject.toml
          echo "版本号已更新为 ${{ github.event.inputs.version }}"
      
      - name: 提交版本更新
        run: |
          git add pyproject.toml
          git commit -m "Bump version to ${{ github.event.inputs.version }}"
      
      - name: 收集Commit Messages
        id: get_commits
        run: |
          # 获取最新的tag
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          # 如果没有找到tag，则收集所有的commit
          if [ -z "$latest_tag" ]; then
            echo "没有找到以前的tag，收集所有commit"
            changelog=$(git log --pretty=format:"* %s (%h)" --reverse)
          else
            echo "找到最新的tag: $latest_tag，收集从该tag之后的commit"
            changelog=$(git log ${latest_tag}..HEAD --pretty=format:"* %s (%h)" --reverse)
          fi
          
          # 保存changelog到文件
          echo "$changelog" > changelog.md
          
          # 使用环境文件语法设置输出变量
          echo "changelog<<EOL" >> "$GITHUB_OUTPUT"
          echo "$changelog" >> "$GITHUB_OUTPUT"
          echo "EOL" >> "$GITHUB_OUTPUT"
      
      - name: 创建Tag
        run: |
          git tag v${{ github.event.inputs.version }}
      
      - name: 推送更改和Tag
        run: |
          git push origin main
          git push origin v${{ github.event.inputs.version }}
      
      - name: 创建Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.event.inputs.version }}
          release_name: 版本 ${{ github.event.inputs.version }}
          body_path: changelog.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
    
    outputs:
      changelog: ${{ steps.get_commits.outputs.changelog }}

  deploy-to-pypi:
    needs: update-version
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          ref: v${{ github.event.inputs.version }}  # 使用新创建的tag
      
      - name: 设置Python环境
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: 安装依赖
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: 构建包
        run: python -m build
      
      - name: 发布包到PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          twine upload dist/*
